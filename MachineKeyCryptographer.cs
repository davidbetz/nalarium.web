#region Copyright
//+ Nalarium Pro 3.0 - Web Module
//+ Copyright © Jampad Technology, Inc. 2008-2010
#endregion
using System;
using System.Reflection;
using System.Web;
//+
namespace Nalarium.Web
{
    public static class MachineKeyCryptographer
    {
        //- @EncryptCode -//
        public static String EncryptCode(String code)
        {
            if (String.IsNullOrEmpty(code))
            {
                return String.Empty;
            }
            Type pageType = typeof(System.Web.UI.Page);
            System.Reflection.MethodInfo methodInfo = pageType.GetMethod("EncryptString", BindingFlags.Static | BindingFlags.NonPublic);
            //+
            return methodInfo.Invoke(null, new Object[] { code }) as string;
        }

        //- @DecryptCode -//
        public static String DecryptCode(String code)
        {
            if (String.IsNullOrEmpty(code))
            {
                return String.Empty;
            }
            Byte[] encryptedData = HttpServerUtility.UrlTokenDecode(code);
            Type machineKeySection = typeof(System.Web.Configuration.MachineKeySection);
            Type[] paramTypes = new Type[] { typeof(Boolean), typeof(Byte[]), typeof(Byte[]), typeof(Int32), typeof(Int32) };
            System.Reflection.MethodInfo encryptOrDecryptData = machineKeySection.GetMethod("EncryptOrDecryptData", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic, null, paramTypes, null);
            try
            {
                Byte[] decryptedData = (Byte[])encryptOrDecryptData.Invoke(null, new Object[] { false, encryptedData, null, 0, encryptedData.Length });
                string decrypted = System.Text.Encoding.UTF8.GetString(decryptedData);
                //+
                return decrypted;
            }
            catch (System.Reflection.TargetInvocationException)
            {
                return string.Empty;
            }
        }

        //- @DecryptCodeAsStringArray -//
        /// <summary>
        /// Decrypts an encrypted ASP.NET resource URL as a string array containing both the resource type and assembly.  It is specific to resources generated by the current machine.
        /// </summary>
        /// <param name="code">Encrypted base64 resource URL.  String.Empty is there is an error.</param>
        /// <returns>Decrypted string array representing both the resource type and assembly.</returns>
        public static String[] DecryptCodeAsStringArray(String code)
        {
            String data = DecryptCode(code);
            if (String.IsNullOrEmpty(data))
            {
                return null;
            }
            String[] partArray = data.Split('|');
            if (partArray.Length != 2)
            {
                return null;
            }
            //+
            return new String[] { partArray[0][0].ToString(), partArray[0].Substring(1, partArray[0].Length - 1), partArray[1] };
        }
    }
}